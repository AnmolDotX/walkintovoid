// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  userType       Role      @default(USER)
  hashedPassword String?
  posts          Post[]
  comments       Comment[]
  projects       Project[]
  createdAt      DateTime  @default(now())
  Account        Account[]
  Session        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationOtp {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String     @unique
  content       String
  excerpt       String?
  bannerImage   String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    String
  tags          Tag[]      @relation("PostTags")
  status        PostStatus @default(PENDING)
  deleteRequest Boolean    @default(false)
  comments      Comment[]
  likes         Int        @default(0)
  views         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  githubUrl   String
  liveUrl     String
  content     String
  bannerImage String?
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
}
